<?xml version="1.0"?>
<launch>
	<!-- Whether this is simulated or executed on the real robot. 
	* "true" = simulated
	* "false" = on real robot
	-->
	<arg name="simulated" value="true" />

	<!-- domain file -->
	<param name="data_path" value="$(find squirrel_planning_launch)/common/" />
	<param name="planner_path" value="$(find rosplan_planning_system)/common/bin/" />
	<param name="planner_command" value="timeout 1800 $(find rosplan_planning_system)/common/bin/popf3-clp-last DOMAIN PROBLEM" />
	<param name="/rosplan/data_path" value="$(find squirrel_planning_launch)/common/" />
	<param name="/scenario_setup_file" value="$(find squirrel_planning_execution)/conf/final-review.conf" />

	<!-- domain file -->
	<param name="/rosplan/domain_path" value="$(find squirrel_planning_launch)/common/final-review-redux-domain.pddl" />


	<!-- knowledge base -->
	<node name="rosplan_knowledge_base" pkg="rosplan_knowledge_base" type="knowledgeBase" respawn="false" output="screen">
	</node>

	<!-- scene database (MongoDB) -->
	<node name="rosplan_scene_database" pkg="mongodb_store" type="mongodb_server.py" respawn="false" output="log">
		<param name="database_path" value="$(find rosplan_knowledge_base)/common/mongoDB" />
	</node>
	<node name="rosplan_scene_message_store" pkg="mongodb_store" type="message_store_node.py" respawn="false" output="log">
	</node>domai

	<!-- planning system -->
	<node name="rosplan_planning_system" pkg="rosplan_planning_system" type="planner" respawn="false" output="screen">
		<!-- directory for generated files -->
		<param name="data_path" value="$(find squirrel_planning_launch)/common/" />
		<param name="problem_path" value="$(find squirrel_planning_launch)/common/problem.pddl" />
		<param name="strl_file_path" value="$(find squirrel_planning_launch)/common/plan.strl" />
		<!-- to run the planner -->
		<param name="planner_command" value="timeout 1800 $(find rosplan_planning_system)/common/bin/popf3-clp-last DOMAIN PROBLEM" />
		<param name="generate_default_problem" value="true" />
		<param name="parser" value="popf" />
	</node>

	<!-- standard ROS interfaces -->
	<node name="rosplan_interface_movebase" pkg="rosplan_interface_movebase" type="rpmovebase" respawn="false" output="screen" unless="$(arg simulated)">
		<param name="action_server" value="/move_base" />
		<param name="pddl_action_name" value="goto_waypoint" />
	</node>

    <!--
	<node name="rosplan_interface_mapping" pkg="rosplan_interface_mapping" type="rproadmapServer" respawn="false" output="screen">
		<param name="data_path" value="$(find squirrel_planning_launch)/common/" />
		<param name="cost_map_topic" value="/move_base/global_costmap/costmap" />
		<param name="cost_map_update_topic" value="/move_base/global_costmap/costmap_updates" />
		<param name="odom_topic" value="/odom" />
		<param name="use_static_map" value="false" />
		<param name="static_map_service" value="/static_map" />
	</node>
    -->

    <!-- SQUIRREL interfaces -->
	<node name="squirrel_object_server" pkg="squirrel_interface_perception" type="rpObjectPerception" respawn="false" output="screen" unless="$(arg simulated)"></node>
	<!--node name="squirrel_social_behaviour" pkg="squirrel_interface_hri" type="PerformSocialBehaviour" respawn="false" output="screen"></node-->

	<node name="squirrel_interface_perception" pkg="squirrel_interface_perception" type="rpperceptionServer" respawn="false" output="screen" unless="$(arg simulated)">
		<!-- set "true" if you want to fake object perception completely -->
		<param name="simulate_perception" value="false" />
		<param name="use_dynamic_object_finding" value="true" />
	</node>

	<node name="squirrel_interface_camera" pkg="squirrel_interface_perception" type="rpCameraControl" respawn="false" output="screen" unless="$(arg simulated)">
		<!-- set "true" if you want to fake object perception completely -->
		<param name="camera_control_topic" value="/tilt_controller/command" />
		<param name="default_camera_angle" value="0.5" />
	</node>
    <!--
	<node name="squirrel_interface_manipulation" pkg="squirrel_interface_manipulation" type="rppushServer" respawn="false" output="screen">
		<param name="simulate_pushing" type="bool" value="false" />
		<param name="push_action_server" value="/push" />
		<param name="smash_action_server" value="/smash" />
	</node>
    -->
	
	<node name="squirrel_interface_grasping" pkg="squirrel_interface_manipulation" type="rpgraspServer" respawn="false" output="screen" unless="$(arg simulated)">
		<param name="manipulation_action_server" value="/squirrel_object_manipulation_server" />
		<param name="placement" value="true" />
	</node>

	<!-- simulation acitons (ALL TRUE) -->
	<node name="simulated_actions" pkg="squirrel_planning_execution" type="simulatedPDDLActionsNode" output="screen" if="$(arg simulated)">
		<param name="query_user" value="false" />
		<param name="simulate_goto_waypoint" value="true"/>
		<param name="simulate_explore_waypoint" value="true"/>
		<param name="simulate_clear_object" value="true"/>
		<param name="simulate_classify_object" value="true"/>
		<param name="simulate_put_object_in_box" value="true"/>
		<param name="simulate_pickup_object" value="true"/>
		<param name="simulate_drop_object" value="true"/>
		<param name="simulate_child_give_object_to_robot" value="true"/>
		<param name="simulate_child_pickup" value="true"/>
		<param name="simulate_give_object" value="true"/>
	</node>

	<node name="squirrel_planning_execution" pkg="squirrel_planning_execution" type="finalReviewRedux" respawn="false" output="screen">
		<param name="data_path" value="$(find squirrel_planning_launch)/common/" />
		<param name="cost_map_topic" value="/move_base/global_costmap/costmap" />
		<param name="cost_map_update_topic" value="/move_base/global_costmap/costmap_updates" />
		<param name="use_static_map" value="false" type="bool" />
		<param name="static_map_service" value="/static_map" />
		<param name="occupancy_threshold" value="20" />
		<param name="manipulation_service_topic" value="/squirrel_manipulation/waypoint_request" />
		<param name="simulated" value="$(arg simulated)" />
	</node>
</launch>
